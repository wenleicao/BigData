Q1  tree
//prepare two dataset for later use
//create parent reference table
db.categories.insert( { _id: "MongoDB", parent: "Databases" } )
db.categories.insert( { _id: "dbm", parent: "Databases" } )
db.categories.insert( { _id: "Databases", parent: "Programming" } )
db.categories.insert( { _id: "Languages", parent: "Programming" } )
db.categories.insert( { _id: "Programming", parent: "Books" } )
db.categories.insert( { _id: "Books", parent: null } )


//create child reference table
db.categories_c.insert( { _id: "MongoDB", children: [] } )
db.categories_c.insert( { _id: "dbm", children: [] } )
db.categories_c.insert( { _id: "Databases", children: [ "MongoDB", "dbm" ] } )
db.categories_c.insert( { _id: "Languages", children: [] } )
db.categories_c.insert( { _id: "Programming", children: [ "Databases", "Languages" ] } )
db.categories_c.insert( { _id: "Books", children: [ "Programming" ] } )




Q1.1  Assume we model the records and relationships in Figure 1 using the Parent-Referencing model (Slide 49 in MongoDB-2). Write a query to report the ancestors of ¡°MongoDB¡±.

var results=[];
var item = db.categories.findOne({"_id" : "MongoDB"});
var parent = db.categories.findOne({"_id" : item.parent});
var i = 1;
while(parent){
	results.push({name:parent._id, level:i});
	i= i+1;
	parent = db.categories.findOne({"_id" : parent.parent});
}
results;


Q1.2  Assume we model the records and relationships in Figure 1 using the Parent-Referencing model (Slide 49 in MongoDB-2). You are given only the root node, i.e., _id = ¡°Books¡±, write a query that reports the height of the tree. (It should be 4 in our case). 


var descendants = [];
var stack = [];
var item = db.categories.findOne({_id: "Books"});
stack.push(item);
var level =0
while (stack.length > 0) {
	var current = stack.pop();
        var children =  db.categories.find( {parent: current._id});
	while (children.hasNext() == true) {
		var child = children.next();
		descendants.push(child._id);
		stack.push(child);
	}
	
	if (current._id != child._id) {level +=1} else {level = level +0}
}
level



Q1.3 Assume we model the records and relationships in Figure 1 using the Child-Referencing model (Slide 54 in MongoDB-2). Write a query to report the parent of ¡°dbm¡±. 

db.categories_c.findOne({children:"dbm"})


Q1.4 Write a query to report the descendants of ¡°Books¡±. The output should be an array containing values [¡°Programming¡±, ¡°Languages¡±, ¡°Databases¡±, ¡°MongoDB¡±, ¡°dbm¡±] 
var descendants = [];
var stack = [];
var item = db.categories_c.findOne({_id: "Books"});
stack.push(item);
while (stack.length > 0) {
	var current = stack.pop();
        var children =  db.categories_c.find( {_id:{$in:current.children}});
	while (children.hasNext() == true) {
		var child = children.next();
		descendants.push(child._id);
		stack.push(child);
	}
		
}
descendants


Q1.5 Assume we model the records and relationships in Figure 1 using the Child-Referencing model (Slide 54 in MongoDB-2). Write a query to report the siblings ¡°Databases¡±

var parent = db.categories_c.findOne ({children:"Databases"})
db.categories_c.find({ $and: [ {_id:{$in:parent.children}}, {_id:{$ne:"Databases"}} ] })



-----------------------------------------------------------------------------------------------------------
Q2  aggregation

//1. create test collection
//put same document into a variable in form of arry

var sample = [

{
    "_id" : 1,
    "name" : {
        "first" : "John",
        "last" : "Backus"
    },
    "birth" : ISODate("1924-12-03T05:00:00Z"),
    "death" : ISODate("2007-03-17T04:00:00Z"),
    "contribs" : [
        "Fortran",
        "ALGOL",
        "Backus-Naur Form",
        "FP"
    ],
    "awards" : [
        {
            "award" : "W.W. McDowell Award",
            "year" : 1967,
            "by" : "IEEE Computer Society"
        },
        {
            "award" : "National Medal of Science",
            "year" : 1975,
            "by" : "National Science Foundation"
        },
        {
            "award" : "Turing Award",
            "year" : 1977,
            "by" : "ACM"
        },
        {
            "award" : "Draper Prize",
            "year" : 1993,
            "by" : "National Academy of Engineering"
        }
    ]
}
,
{
    "_id" : ObjectId("51df07b094c6acd67e492f41"),
    "name" : {
        "first" : "John",
        "last" : "McCarthy"
    },
    "birth" : ISODate("1927-09-04T04:00:00Z"),
    "death" : ISODate("2011-12-24T05:00:00Z"),
    "contribs" : [
        "Lisp",
        "Artificial Intelligence",
        "ALGOL"
    ],
    "awards" : [
        {
            "award" : "Turing Award",
            "year" : 1971,
            "by" : "ACM"
        },
        {
            "award" : "Kyoto Prize",
            "year" : 1988,
            "by" : "Inamori Foundation"
        },
        {
            "award" : "National Medal of Science",
            "year" : 1990,
            "by" : "National Science Foundation"
        }
    ]
}
,
{
    "_id" : 3,
    "name" : {
        "first" : "Grace",
        "last" : "Hopper"
    },
    "title" : "Rear Admiral",
    "birth" : ISODate("1906-12-09T05:00:00Z"),
    "death" : ISODate("1992-01-01T05:00:00Z"),
    "contribs" : [
        "UNIVAC",
        "compiler",
        "FLOW-MATIC",
        "COBOL"
    ],
    "awards" : [
        {
            "award" : "Computer Sciences Man of the Year",
            "year" : 1969,
            "by" : "Data Processing Management Association"
        },
        {
            "award" : "Distinguished Fellow",
            "year" : 1973,
            "by" : " British Computer Society"
        },
        {
            "award" : "W. W. McDowell Award",
            "year" : 1976,
            "by" : "IEEE Computer Society"
        },
        {
            "award" : "National Medal of Technology",
            "year" : 1991,
            "by" : "United States"
        }
    ]
}
,
{
    "_id" : 4,
    "name" : {
        "first" : "Kristen",
        "last" : "Nygaard"
    },
    "birth" : ISODate("1926-08-27T04:00:00Z"),
    "death" : ISODate("2002-08-10T04:00:00Z"),
    "contribs" : [
        "OOP",
        "Simula"
    ],
    "awards" : [
        {
            "award" : "Rosing Prize",
            "year" : 1999,
            "by" : "Norwegian Data Association"
        },
        {
            "award" : "Turing Award",
            "year" : 2001,
            "by" : "ACM"
        },
        {
            "award" : "IEEE John von Neumann Medal",
            "year" : 2001,
            "by" : "IEEE"
        }
    ]
}
,
{
    "_id" : 5,
    "name" : {
        "first" : "Ole-Johan",
        "last" : "Dahl"
    },
    "birth" : ISODate("1931-10-12T04:00:00Z"),
    "death" : ISODate("2002-06-29T04:00:00Z"),
    "contribs" : [
        "OOP",
        "Simula"
    ],
    "awards" : [
        {
            "award" : "Rosing Prize",
            "year" : 1999,
            "by" : "Norwegian Data Association"
        },
        {
            "award" : "Turing Award",
            "year" : 2001,
            "by" : "ACM"
        },
        {
            "award" : "IEEE John von Neumann Medal",
            "year" : 2001,
            "by" : "IEEE"
        }
    ]
}
,
{
    "_id" : 6,
    "name" : {
        "first" : "Guido",
        "last" : "van Rossum"
    },
    "birth" : ISODate("1956-01-31T05:00:00Z"),
    "contribs" : [
        "Python"
    ],
    "awards" : [
        {
            "award" : "Award for the Advancement of Free Software",
            "year" : 2001,
            "by" : "Free Software Foundation"
        },
        {
            "award" : "NLUUG Award",
            "year" : 2003,
            "by" : "NLUUG"
        }
    ]
}
,
{
    "_id" : ObjectId("51e062189c6ae665454e301d"),
    "name" : {
        "first" : "Dennis",
        "last" : "Ritchie"
    },
    "birth" : ISODate("1941-09-09T04:00:00Z"),
    "death" : ISODate("2011-10-12T04:00:00Z"),
    "contribs" : [
        "UNIX",
        "C"
    ],
    "awards" : [
        {
            "award" : "Turing Award",
            "year" : 1983,
            "by" : "ACM"
        },
        {
            "award" : "National Medal of Technology",
            "year" : 1998,
            "by" : "United States"
        },
        {
            "award" : "Japan Prize",
            "year" : 2011,
            "by" : "The Japan Prize Foundation"
        }
    ]
}
,
{
    "_id" : 8,
    "name" : {
        "first" : "Yukihiro",
        "aka" : "Matz",
        "last" : "Matsumoto"
    },
    "birth" : ISODate("1965-04-14T04:00:00Z"),
    "contribs" : [
        "Ruby"
    ],
    "awards" : [
        {
            "award" : "Award for the Advancement of Free Software",
            "year" : "2011",
            "by" : "Free Software Foundation"
        }
    ]
}
,
{
    "_id" : 9,
    "name" : {
        "first" : "James",
        "last" : "Gosling"
    },
    "birth" : ISODate("1955-05-19T04:00:00Z"),
    "contribs" : [
        "Java"
    ],
    "awards" : [
        {
            "award" : "The Economist Innovation Award",
            "year" : 2002,
            "by" : "The Economist"
        },
        {
            "award" : "Officer of the Order of Canada",
            "year" : 2007,
            "by" : "Canada"
        }
    ]
}
,
{
    "_id" : 10,
    "name" : {
        "first" : "Martin",
        "last" : "Odersky"
    },
    "contribs" : [
        "Scala"
    ]
}
];

//create collection test
db.test.insert(sample);

//Q2.1  Write an aggregation query that groups by the award name, i.e., the ¡°award¡± field inside the ¡°awards¡± array, and reports the count of each award. (Use Map-Reduce mechanism) 

function m() { 
    for(var i in this.awards) {     
         emit({award_name:this.awards[i].award}, 
              1); 
    } }

function r(id,docs) {
      return Array.sum(docs);
}

db.test.mapReduce(m,r,{out:"map_reduce_out"})
db.map_reduce_out.find()



// Q2.2 Write an aggregation query that groups by the birth year, i.e., the year within the ¡°birth¡± field, are report an array of _ids for each birth year. (Use Aggregate mechanism) 

//my sytem did not support date before 1970, but this code should work, need to test it on coding ground, this has been test use experimental data, the code works
db.test.aggregate ( [
{$group:{_id:{year:{$year:"$birth"}}, id_array:{$push:"$_id"}}}
])

//Q2.3 Report the document with the smallest and largest _ids. You first need to find the values of the smallest and largest, and then report their documents. 

db.test.aggregate([
 {$sort:{"_id":1}},
 {$group:{"_id":null,
          "max":{$last:"$$ROOT"},
          "min":{$first:"$$ROOT"}}},
 {$project:{	"_id" :0,
		"max._id":1,
            	"max.name":1,
		"max.birth":1,
            	"max.death":1,
		"max.contribs":1,
		"max.awards":1,
		"min._id":1,
           	"min.name":1,
		"min.birth":1,
		"min.death":1,
		"min.contribs":1,
		"min.awards":1
		}}
 ])

//Q2.4 Use the $text operator to search for and report all documents containing ¡°Turing Award¡± as one sentence (not separate keywords).  
db.test.createIndex ({"awards.award":"text"})
db.test.find({$text:{$search:"\"Turing Award\""}})

//Q2.5 Use the $text operator to search for and report all documents containing either ¡°Turing¡± or ¡°National Medal¡±. 

//based on this link, this is not possible 
//http://stackoverflow.com/questions/28428288/mongodb-logical-or-when-searching-for-words-and-phrases-using-full-text-search

//this one is actually logic and
db.test.find({$text:{$search:"\"Turing\" \"National Medal\""}})


//this is give correct result without use text search
db.test.find({"awards.award": {$in : [/Turing/, /National Medal/]}})


